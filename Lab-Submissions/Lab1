#include "test.h"

#include <string.h> // for testing generate_splits()

// DONE BY VISHVA PARMAR (22110290)
/*
 * Generate k-selections of a[0..n-1] in lexicographic order and call process_selection to process them.
 *
 * The array b[] will have enough space to hold k elements.
 * For a selection i1, ..., ik, you should set b[0] = a[i1], ..., b[k-1] = a[ik].
 * Selections should be generated in lexicographic order.
 * a[0..k-1] is the smallest selection and a[n-k..n-1] is the largest.
 */
/*k-selections
*/
void generator(int a[],int n,int k,int b[],int index,int start,void *data,void (*process_selection)(int *b,int k,void *data)){
    if (index==k){
        process_selection(b,k,data);
        return;
    }
    for (int i = start; i < n; i++) {
        b[index] = a[i];
        generator(a, n, k, b, index + 1, i + 1, data, process_selection);
    }
}
void generate_selections(int a[],int n,int k,int b[],void *data,void (*process_selection)(int *b,int k, void *data)){
    generator(a,n,k,b,0,0,data,process_selection);
}


// DONE BY TRIPTI VISHWAKARMA (22110275)
/*
 * See Exercise 2 (a), page 94 in Jeff Erickson's textbook.
 * The exercise only asks you to count the possible splits.
 * In this assignment, you have to generate all possible splits into buf[]
 * and call process_split() to process them.
 * The dictionary parameter is an array of words, sorted in dictionary order.
 * nwords is the number of words in this dictionary.
 */
void process_split(char buf[], void *data) {
    // Process the split, for example, print it
    printf("%s\n", buf);
}

void generate_splits_helper(const char *source, const char *dictionary[], int nwords, char buf[], int index, int buf_index, void *data, void (*process_split)(char buf[], void *data)) {
    int len = strlen(source);

    if (index == len) {
        if (buf_index > 0) {
            buf[buf_index - 1] = '\0';  // Remove the trailing space
            process_split(buf, data);
        }
        return;
    }

    for (int i = index; i < len; i++) {
        char prefix[100]; // Assuming the maximum length of a word is 100
        strncpy(prefix, source + index, i - index + 1);
        prefix[i - index + 1] = '\0';

        // Check if the prefix is a word in the dictionary
        for (int j = 0; j < nwords; j++) {
            if (strcmp(dictionary[j], prefix) == 0) {
                strcpy(buf + buf_index, prefix);
                buf[buf_index + strlen(prefix)] = ' ';

                // Recur for the remaining portion of the string
                generate_splits_helper(source, dictionary, nwords, buf, i + 1, buf_index + strlen(prefix) + 1, data, process_split);
            }
        }
    }
}

void generate_splits(const char *source, const char *dictionary[], int nwords, char buf[], void *data, void (*process_split)(char buf[], void *data)) {
    // Call the helper function to generate splits
    generate_splits_helper(source, dictionary, nwords, buf, 0, 0, data, process_split);
}

// DONE BY VENKATA SATHYA PAVANI TIRUNAGARI (22110284)
/*
 * Transform a[] so that it becomes the previous permutation of the elements in it.
 * If a[] is the first permutation, leave it unchanged.
 */
void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

void reverse(int a[], int start, int end) {
    while (start < end) {
        swap(&a[start], &a[end]);
        start++;
        end--;
    }
}

int find_next_smaller(int a[], int start, int end, int key) {
    int idx = -1;
    for (int i = start; i <= end; i++) {
        if (a[i] < key && (idx == -1 || a[i] > a[idx]))
            idx = i;
    }
    return idx;
}

void previous_permutation(int a[], int n) {
    // Check if it's the first permutation (already in decreasing order)
    int i = n - 1;
    while (i > 0 && a[i] >= a[i - 1])
        i--;

    // If it's the first permutation, return unchanged
    if (i == 0)
        return;

    // Find the first element that is not in ascending order from the right
    i = n - 2;
    while (i >= 0 && a[i] <= a[i + 1]) {
        i--;
    }

    // If all elements are in ascending order, reverse the array to get the previous permutation
    if (i >= 0) {
        int j = find_next_smaller(a, i + 1, n - 1, a[i]);
        swap(&a[i], &a[j]);
    }

    // Reverse the array from i+1 to n-1
    reverse(a, i + 1, n - 1);
}
/* Write your tests here. Use the previous assignment for reference. */
typedef struct {
    int index;
    int err;
    int first;
} state_t;

static void test_selections_2165(int b[], int k, void *data)
{
    state_t *s = (state_t *)data;
    if (s->first) {
        s->err = 0;
        s->first = 0;
    }
    switch (s->index) {
    case 0:
        if ((b[0] != 2) || (b[1] != 1)) {
            s->err = 1;
        }
        break;
    case 1:
        if ((b[0] != 2) || (b[1] != 6)) {
            s->err = 1;
        }
        break;
    case 2:
        if ((b[0] != 2) || (b[1] != 5)) {
            s->err = 1;
        }
        break;
    case 3:
        if ((b[0] != 1) || (b[1] != 6)) {
            s->err = 1;
        }
        break;
    case 4:
        if ((b[0] != 1) || (b[1] != 5)) {
            s->err = 1;
        }
        break;
    case 5:
        if ((b[0] != 6) || (b[1] != 5)) {
            s->err = 1;
        }
        break;
    default:
        s->err = 1;
    }
    ++(s->index);
}

void count_selections(int b[], int k, void *data)
{
    int *d = (int*)data;
    ++*d;
}

typedef struct {
    int b[100];
} selection_t;

void last_selection(int b[], int k, void *data)
{
    selection_t *s = (selection_t*)data;
    for (int i = 0; i < k; ++i) {
        s->b[i] = b[i];
    }
}

BEGIN_TEST(generate_selections) {
    int a[] = { 2, 1, 6, 5 };
    int b[10];
    state_t s2165 = { .index = 0, .err = 1, .first = 1 };
    generate_selections(a, 4, 2, b, &s2165, test_selections_2165);
    ASSERT(!s2165.err, "Failed on 2 1 6 5.");
    int c = 0;
    int aa[] = { 1, 5, 3, 0, 1, 12, 4, 3, 6, 6 };
    generate_selections(aa, 10, 5, b, &c, count_selections);
    ASSERT_EQ(c, 252, "Failed on 10C5.");

    selection_t s;
    generate_selections(aa, 10, 5, b, &s, last_selection);
    ASSERT_ARRAY_VALUES_EQ(s.b, 5, "Failed on last of 10C5.", 12, 4, 3, 6, 6);
} END_TEST

void test_splits_art(char buf[], void *data)
{
    state_t *s = (state_t*)data;
    if (s->first) {
        s->err = 0;
        s->first = 0;
    }
    switch (s->index) {
    case 0:
        if (strcmp(buf, "art is toil")) {
            s->err = 1;
        }
        break;
    case 1:
        if (strcmp(buf, "artist oil")) {
            s->err = 1;
        }
        break;
    default:
        s->err = 1;
    }
    ++(s->index);
}

// For Test Case chosen by me
void test_splits_ilikeicecreamandmango(char buf1[], void *data1)
{
    state_t *s1 = (state_t*)data1;
    if (s1->first) {
        s1->err = 0;
        s1->first = 0;
    }
    switch (s1->index) {
    case 0:
        if (strcmp(buf1, "i like ice cream and man go")) {
            s1->err = 1;
        }
        break;
    case 1:
        if (strcmp(buf1, "i like ice cream and mango")) {
            s1->err = 1;
        }
        break;
    case 2:
        if (strcmp(buf1, "i like icecream and man go")) {
            s1->err = 1;
        }
        break;
    case 3:
        if (strcmp(buf1, "i like icecream and mango")) {
            s1->err = 1;
        }
        break;
    default:
        s1->err = 1;
    }
    ++(s1->index);
}

BEGIN_TEST(generate_splits) {
    const char *a = "artistoil";
    const char *dict[] = {
        "art",
        "artist",
        "is",
        "oil",
        "toil"
    };
    int nwords = 5;
    state_t s = { .index = 0, .err = 1, .first = 1 };
    char buf[256];
    generate_splits(a, dict, nwords, buf, &s, test_splits_art);
    ASSERT(!s.err, "Failed on 'artistoil'.");
    // Assume you have a function 'test_splits_art' with the same signature as 'process_split'.

    // My test case
    const char *a1 = "ilikeicecreamandmango";
    const char *dict1[] = {"i", "like", "ice", "and", "cream", "icecream",  "man", "go", "mango"};
    int nwords1 = 9;
    state_t s1 = { .index = 0, .err = 1, .first = 1 };
    char buf1[256];
    generate_splits(a1, dict1, nwords1, buf1, &s1, test_splits_ilikeicecreamandmango);
    ASSERT(!s1.err, "Failed on 'ilikeicecreamandmango'.");
} END_TEST

BEGIN_TEST(previous_permutation) {
    int a[] = { 1, 5, 6, 2, 3, 4 };
    previous_permutation(a, 6);
    ASSERT_ARRAY_VALUES_EQ(a, 6, "Failed on 1 5 6 2 3 4.", 1, 5, 4, 6, 3, 2);
    int aa[] = { 1, 2, 3, 5, 4, 6 };
    previous_permutation(aa, 3); // 3 is correct.
    ASSERT_ARRAY_VALUES_EQ(aa, 3, "Failed on 1 2 3.", 1, 2, 3);
} END_TEST

int main()
{
    run_tests((test_t[]) {
            TEST(generate_selections),
            TEST(generate_splits),
            TEST(previous_permutation),
            0
        });
    return 0;
}

