#include <iostream>
#include <vector>
#include <array>
#include <algorithm>
#include <tuple>
#include "queue.hpp"

struct Board {
    int e[3][3];
};

long ord(const Board& b) {
    long o = 0;
    int pow = 1;
    for (int r = 2; r >= 0; --r) {
        for (int c = 2; c >= 0; --c) {
            o += b.e[r][c] * pow;
            pow *= 7;
        }
    }
    return o;
}

void read_board(Board& b) {
    for (int r = 0; r < 3; ++r) {
        for (int c = 0; c < 3; ++c) {
            std::cin >> b.e[r][c];
        }
    }
}

std::tuple<int, int> find_space(const Board& b) {
    for (int r = 0; r < 3; ++r)
        for (int c = 0; c < 3; ++c)
            if (b.e[r][c] == 0) return {r, c};
    assert(0);
    return {0, 0};
}

Board up(const Board& b) {
    const std::tuple<int, int> space = find_space(b);
    const int r = std::get<0>(space);
    const int c = std::get<1>(space);
    if (r == 2) return b;
    Board o = b;
    switch (o.e[r + 1][c]) {
        case 1: o.e[r][c] = 3; break;
        case 2: o.e[r][c] = 2; break;
        case 3: o.e[r][c] = 6; break;
        case 4: o.e[r][c] = 4; break;
        case 5: o.e[r][c] = 1; break;
        case 6: o.e[r][c] = 5; break;
    }
    o.e[r + 1][c] = 0;
    return o;
}

Board down(const Board& b) {
    const std::tuple<int, int> space = find_space(b);
    const int r = std::get<0>(space);
    const int c = std::get<1>(space);
    if (r == 0) return b;
    Board o = b;
    switch (o.e[r - 1][c]) {
        case 1: o.e[r][c] = 5; break;
        case 2: o.e[r][c] = 2; break;
        case 3: o.e[r][c] = 1; break;
        case 4: o.e[r][c] = 4; break;
        case 5: o.e[r][c] = 6; break;
        case 6: o.e[r][c] = 3; break;
    }
    o.e[r - 1][c] = 0;
    return o;
}

Board left(const Board& b) {
    const std::tuple<int, int> space = find_space(b);
    const int r = std::get<0>(space);
    const int c = std::get<1>(space);
    if (c == 2) return b;
    Board o = b;
    switch (o.e[r][c + 1]) {
        case 1: o.e[r][c] = 2; break;
        case 2: o.e[r][c] = 6; break;
        case 3: o.e[r][c] = 3; break;
        case 4: o.e[r][c] = 1; break;
        case 5: o.e[r][c] = 5; break;
        case 6: o.e[r][c] = 4; break;
    }
    o.e[r][c + 1] = 0;
    return o;
}

Board right(const Board& b) {
    const std::tuple<int, int> space = find_space(b);
    const int r = std::get<0>(space);
    const int c = std::get<1>(space);
    if (c == 0) return b;
    Board o = b;
    switch (o.e[r][c - 1]) {
        case 1: o.e[r][c] = 4; break;
        case 2: o.e[r][c] = 1; break;
        case 3: o.e[r][c] = 3; break;
        case 4: o.e[r][c] = 6; break;
        case 5: o.e[r][c] = 5; break;
        case 6: o.e[r][c] = 2; break;
    }
    o.e[r][c - 1] = 0;
    return o;
}

bool is_same(const Board& a, const Board& b) {
    for (int r = 0; r < 3; ++r)
        for (int c = 0; c < 3; ++c)
            if (a.e[r][c] != b.e[r][c]) return false;

    return true;
}

enum Move { L = 1, R = 2, U = 3, D = 4 };

const int MAX_ORD = 40353600;

std::vector<int> solve(const Board& src, const Board& dest) {
    queue<Board, MAX_ORD> q;
    int visited[MAX_ORD];
    Board parent[MAX_ORD];

    enqueue(q, src);
    visited[ord(src)] = L;

    while (!is_empty(q)) {
        Board u = dequeue(q);
        if (is_same(u, dest)) {
            std::vector<int> moves;
            Board c = u;
            int o = ord(c);
            while (!is_same(c, src)) {
                moves.push_back(visited[o]);
                c = parent[o];
                o = ord(c);
            }
            std::reverse(moves.begin(), moves.end());
            return moves;
        }

        Board a = up(u);
        Board b = down(u);
        Board c = left(u);
        Board d = right(u);

        int aord = ord(a);
        int bord = ord(b);
        int cord = ord(c);
        int dord = ord(d);

        if (!visited[aord]) {
            visited[aord] = U;
            parent[aord] = u;
            enqueue(q, a);
        }
        if (!visited[bord]) {
            visited[bord] = D;
            parent[bord] = u;
            enqueue(q, b);
        }
        if (!visited[cord]) {
            visited[cord] = L;
            parent[cord] = u;
            enqueue(q, c);
        }
        if (!visited[dord]) {
            visited[dord] = R;
            parent[dord] = u;
            enqueue(q, d);
        }
    }

    std::cout << "Board is not solvable" << std::endl;
    return {0};
}

void print_moves(const std::vector<int>& moves) {
    for (auto m : moves) {
        switch (m) {
            case L: std::cout << "L "; break;
            case R: std::cout << "R "; break;
            case U: std::cout << "U "; break;
            case D: std::cout << "D "; break;
        }
    }
    std::cout << std::endl;
}

int main() {
    Board src, dest;

    read_board(src);
    for (int r = 0; r < 3; ++r) {
        for (int c = 0; c < 3; ++c) {
            dest.e[r][c] = 1;
        }
    }
    dest.e[1][1] = 0;

    auto moves = solve(src, dest);
    print_moves(moves);

    return 0;
}
